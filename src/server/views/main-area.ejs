<!--
<script type="x-shader/x-fragment" id="fragment-shader-smoke">
    uniform vec2 res;//The width and height of our screen
    uniform sampler2D bufferTexture;//Our input texture
    uniform vec3 smokeSource;//The x,y are the posiiton. The z is the power/density
    void main() {
          vec2 pixel = gl_FragCoord.xy / res.xy;
          gl_FragColor = texture2D( bufferTexture, pixel );

          //Get the distance of the current pixel from the smoke source
          float dist = distance(smokeSource.xy,gl_FragCoord.xy);
          //Generate smoke when mouse is pressed
      gl_FragColor.rgb += smokeSource.z * max(15.0-dist,0.0);

     //Smoke diffuse
          float xPixel = 1.0/res.x;//The size of a single pixel
          float yPixel = 1.0/res.y;
          vec4 rightColor = texture2D(bufferTexture,vec2(pixel.x+xPixel,pixel.y));
          vec4 leftColor = texture2D(bufferTexture,vec2(pixel.x-xPixel,pixel.y));
          vec4 upColor = texture2D(bufferTexture,vec2(pixel.x,pixel.y+yPixel));
          vec4 downColor = texture2D(bufferTexture,vec2(pixel.x,pixel.y-yPixel));
      //Diffuse equation
          float factor = 14.0 * 0.016 * (leftColor.r + rightColor.r + downColor.r + upColor.r - 4.0 * gl_FragColor.r);
//We have to account for the low precision of texels
float minimum = 0.003;
if(factor >= -minimum && factor < 0.0) factor = -minimum;

gl_FragColor.rgb += factor;
gl_FragColor.w = 0.9;
     }
</script>
-->

<script type="x-shader/x-vertex" id="vertexShader">
      varying vec2 vUv;
      varying vec2 ovUv;
      uniform vec2 scale;

      void main( void ) {
        ovUv = uv;
        vUv = uv * scale;
        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

          // vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);
          // ovUv = projectionMatrix * modelViewPosition;

      }
</script>

<script type="x-shader/x-fragment" id="fragment-shader-smoke">
    uniform sampler2D bufferTexture;
    uniform float time;
    varying vec2 vUv;
    varying vec2 ovUv;

    vec4 permute( vec4 x ) {
      return mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );
    }

    vec4 taylorInvSqrt(vec4 r) {
      return 1.79284291400159 - 0.85373472095314 * r;
    }

    float snoise( vec3 v ) {

      const vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );
      const vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );

      // First corner

      vec3 i  = floor( v + dot( v, C.yyy ) );
      vec3 x0 = v - i + dot( i, C.xxx );

      // Other corners

      vec3 g = step( x0.yzx, x0.xyz );
      vec3 l = 1.0 - g;
      vec3 i1 = min( g.xyz, l.zxy );
      vec3 i2 = max( g.xyz, l.zxy );

      vec3 x1 = x0 - i1 + 1.0 * C.xxx;
      vec3 x2 = x0 - i2 + 2.0 * C.xxx;
      vec3 x3 = x0 - 1. + 3.0 * C.xxx;

      // Permutations

      i = mod( i, 289.0 );
      vec4 p = permute( permute( permute(
           i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )
           + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )
           + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );

      // Gradients
      // ( N*N points uniformly over a square, mapped onto an octahedron.)

      float n_ = 1.0 / 7.0; // N=7

      vec3 ns = n_ * D.wyz - D.xzx;

      vec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)

      vec4 x_ = floor( j * ns.z );
      vec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)

      vec4 x = x_ *ns.x + ns.yyyy;
      vec4 y = y_ *ns.x + ns.yyyy;
      vec4 h = 1.0 - abs( x ) - abs( y );

      vec4 b0 = vec4( x.xy, y.xy );
      vec4 b1 = vec4( x.zw, y.zw );


      vec4 s0 = floor( b0 ) * 2.0 + 1.0;
      vec4 s1 = floor( b1 ) * 2.0 + 1.0;
      vec4 sh = -step( h, vec4( 0.0 ) );

      vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
      vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

      vec3 p0 = vec3( a0.xy, h.x );
      vec3 p1 = vec3( a0.zw, h.y );
      vec3 p2 = vec3( a1.xy, h.z );
      vec3 p3 = vec3( a1.zw, h.w );

      // Normalise gradients

      vec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );
      p0 *= norm.x;
      p1 *= norm.y;
      p2 *= norm.z;
      p3 *= norm.w;

      // Mix final noise value

      vec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
      m = m * m;
      return 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),
                      dot( p2, x2 ), dot( p3, x3 ) ) );

    }


    float surface( vec3 coord ) {

      float n = 0.0;

      n += 0.7  * abs( snoise( coord ) );
      n += 0.25 * abs( snoise( coord * 2.0 ) );

      return n;

    }




    void main() {


    vec4 t0 = texture2D(bufferTexture, ovUv);



    // if (gl_FragColor.w < 0.086) {
    //   // discard;
    // }
    float oA = gl_FragColor.w;


      // vec2 pixel = gl_FragCoord.xy / gl_FragCoord.xy;



      vec3 coord = vec3( vUv, -time );

      float n = surface( coord );

      vec4 t1 = vec4( vec3( n, n, n ), 1 );
      t1.w = t1.r / 0.2;

      // t1 = t1 / 3.0
      // float blackness = (t1.r + t1.g + t1.b) / 3.0;
      // t1 = texture2D( vec4( t1.r, t1.g, t1.b, blackness), vec2(coord));


      float m = (1.0 + sin(time * 0.5)) / 2.0;

      // gl_FragColor = t1;
       gl_FragColor = mix(t0, t1, t0.a);

       // if (gl_FragColor.r < 0.1) {
       //  discard;
       // }
      // gl_FragColor = t0;

//       half3 original = half3(0.36, 0.74, 0.18);
// half3 mycolor = half3(1, 0, 0);
// half value = 0.5;
// half3 result = original * value + mycolor * (1 - value);


      // vec4 t0 = texture2D(tex0, gl_TexCoord[0].st);
      // vec4 t1 = texture2D(tex1, gl_TexCoord[0].st);
      // gl_FragColor = mix(t0, t1, t1.a);
      // float a = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3;
      // gl_FragColor.r = oA;
      // gl_FragColor.g = oA;
      // gl_FragColor.b = oA;
      // gl_FragColor.w = (gl_FragColor.r + oA) / 2.0;



    // gl_FragColor = texture2D(bufferTexture, vUv);

    // if (gl_FragColor.w < 0.5) {
    //   discard;
    // }


    //   vec2 pixel = gl_FragCoord.xy / gl_FragCoord.xy;



    // ABOVE IS GOOD BITS

      // if (bufferTexture.a< 0.1){
      //    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
      // }

      // if (gl_PointCoord.x =)


      // gl_FragColor = texture2D(bufferTexture, vec2( gl_PointCoord.x, gl_PointCoord.y ) );



      // gl_FragColor = texture2D(bufferTexture, vec2(pixel.x,pixel.y));

    //  if (gl_PointCoord.x > 0)
    //     gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
    //    // discard;
    // }

      // gl_FragColor = vec4( psColor, vOpacity );
      // gl_FragColor = gl_FragColor * texture2D( bufferTexture,vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );
      // gl_FragColor = gl_FragColor * vec4( vColor, 1.0 );

      // vec2 pixel = gl_FragCoord.xy / gl_FragCoord.xy;
      // gl_FragColor = texture2D( bufferTexture, pixel );



      // if (texture2D(bufferTexture,vec2(pixel.x+xPixel,pixel.y));)

      // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
//           vec2 pixel = gl_FragCoord.xy / res.xy;
//           gl_FragColor = texture2D( bufferTexture, pixel );

//           //Get the distance of the current pixel from the smoke source
//           float dist = distance(smokeSource.xy,gl_FragCoord.xy);
//           //Generate smoke when mouse is pressed
//       gl_FragColor.rgb += smokeSource.z * max(15.0-dist,0.0);

//      //Smoke diffuse
//           float xPixel = 1.0/res.x;//The size of a single pixel
//           float yPixel = 1.0/res.y;
//           vec4 rightColor = texture2D(bufferTexture,vec2(pixel.x+xPixel,pixel.y));
//           vec4 leftColor = texture2D(bufferTexture,vec2(pixel.x-xPixel,pixel.y));
//           vec4 upColor = texture2D(bufferTexture,vec2(pixel.x,pixel.y+yPixel));
//           vec4 downColor = texture2D(bufferTexture,vec2(pixel.x,pixel.y-yPixel));
//       //Diffuse equation
//           float factor = 14.0 * 0.016 * (leftColor.r + rightColor.r + downColor.r + upColor.r - 4.0 * gl_FragColor.r);
// //We have to account for the low precision of texels
// float minimum = 0.003;
// if(factor >= -minimum && factor < 0.0) factor = -minimum;

// gl_FragColor.rgb += factor;
// gl_FragColor.w = 0.9;


        // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);




    // uniform vec2 res;//The width and height of our screen
    // uniform sampler2D bufferTexture;//Our input texture
    // uniform vec3 smokeSource;//The x,y are the posiiton. The z is the power/density
    // void main() {
          // vec2 pixel = gl_FragCoord.xy / res.xy;
          // gl_FragColor = texture2D( bufferTexture, pixel );

          //Get the distance of the current pixel from the smoke source
          // float dist = distance(smokeSource.xy,gl_FragCoord.xy);
          //Generate smoke when mouse is pressed
      // gl_FragColor.rgb += smokeSource.z * max(15.0-dist,0.0);
  
     //Smoke diffuse
//           float xPixel = 1.0/res.x;//The size of a single pixel
//           float yPixel = 1.0/res.y;
//           vec4 rightColor = texture2D(bufferTexture,vec2(pixel.x+xPixel,pixel.y));
//           vec4 leftColor = texture2D(bufferTexture,vec2(pixel.x-xPixel,pixel.y));
//           vec4 upColor = texture2D(bufferTexture,vec2(pixel.x,pixel.y+yPixel));
//           vec4 downColor = texture2D(bufferTexture,vec2(pixel.x,pixel.y-yPixel));
// //Diffuse equation
//           float factor = 8.0 * 0.016 * (leftColor.r + rightColor.r + downColor.r * 3.0 + upColor.r - 6.0 * gl_FragColor.r);
     
//           //Account for low precision of texels
//           float minimum = 0.003;
//       if(factor >= -minimum && factor < 0.0) factor = -minimum;

//       gl_FragColor.rgb += factor;




    //      vec2 p = -1.0 + 2.0 *vUv;
    // vec2 q = p - vec2(0.5, 0.5);

    // q.x += sin(time* 0.6) * 0.2;
    // q.y += cos(time* 0.4) * 0.3;

    // float len = length(q);

    // float a = atan(q.y, q.x) + time * 0.3;
    // float b = atan(q.y, q.x) + time * 0.3;
    // float r1 = 0.3 / len + time * 0.5;
    // float r2 = 0.2 / len + time * 0.5;

    // float m = (1.0 + sin(time * 0.5)) / 2.0;
    // // vec4 tex1 = texture2D(bufferTexture, vec2(a + 0.1 / len, r1 ));
    // // vec4 tex2 = texture2D(bufferTexture, vec2(b + 0.1 / len, r2 ));
    // // vec3 col = vec3(mix(tex1, tex2, m));
    // // gl_FragColor = vec4(gl_FragColor * len * 1.5, 1.0);
    // gl_FragColor.r = a;
    // gl_FragColor.g = a;
    // gl_FragColor.b = a;
    // gl_FragColor = texture2D(bufferTexture, vUv);

    // if (gl_FragColor.w < 0.5) {
    //   discard;
    // }

    // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
     }
</script>

<div id="display-area">
  <p>Energy Planet <span id='camera-data'></span></p>
  <canvas id='display-canvas'></canvas>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src="/assets/_js/three.js"></script>
  <script src="/assets/dist/main.js"></script>
</div>
